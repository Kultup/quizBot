from telegram import Update, WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
import os
from dotenv import load_dotenv
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ .env —Ñ–∞–π–ª—É
load_dotenv()

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω —Ç–∞ URL –∑ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
TOKEN = os.getenv('BOT_TOKEN')
WEBAPP_URL = os.getenv('WEBAPP_URL')

if not TOKEN:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env")

if not WEBAPP_URL:
    raise ValueError("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ URL –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Ñ–∞–π–ª .env")

if not WEBAPP_URL.startswith('https://'):
    raise ValueError("URL –≤–µ–±-–¥–æ–¥–∞—Ç–∫—É –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ https://")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        keyboard = [
            [InlineKeyboardButton(
                "üéØ –ü–æ—á–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É",
                web_app=WebAppInfo(url=WEBAPP_URL)
            )],
            [InlineKeyboardButton(
                "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
                callback_data='info'
            )]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üëã *–í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–∫—Ç–æ—Ä–∏–Ω –ø—Ä–æ –£–∫—Ä–∞—ó–Ω—É!*\n\n"
            "üéÆ *–©–æ —è –≤–º—ñ—é:*\n"
            "‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏—Ç–∏ —Ü—ñ–∫–∞–≤—ñ –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏\n"
            "‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä—è—Ç–∏ –≤–∞—à—ñ –∑–Ω–∞–Ω–Ω—è\n"
            "‚Ä¢ –ù–∞–≥–æ—Ä–æ–¥–∂—É–≤–∞—Ç–∏ –∑–∞ —É—Å–ø—ñ—Ö–∏\n\n"
            "üéØ *–ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏?*\n"
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ üëá",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        await update.message.reply_text(
            "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        if query.data == 'info':
            await query.message.reply_text(
                "üéØ *–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É*\n\n"
                "üìù *–§–æ—Ä–º–∞—Ç –≤—ñ–∫—Ç–æ—Ä–∏–Ω–∏:*\n"
                "‚Ä¢ –í—ñ–∫—Ç–æ—Ä–∏–Ω–∞ —Å–∫–ª–∞–¥–∞—î—Ç—å—Å—è –∑ 10 –ø–∏—Ç–∞–Ω—å\n"
                "‚Ä¢ –ù–∞ –∫–æ–∂–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è —î 4 –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ\n"
                "‚Ä¢ –ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ 1 –±–∞–ª\n"
                "‚Ä¢ –ü—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤–∏ –ø–æ–±–∞—á–∏—Ç–µ —Å–≤—ñ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\n"
                "üèÜ *–°–∏—Å—Ç–µ–º–∞ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:*\n"
                "‚Ä¢ 9-10 –±–∞–ª—ñ–≤: ü•á –ó–æ–ª–æ—Ç–æ\n"
                "‚Ä¢ 7-8 –±–∞–ª—ñ–≤: ü•à –°—Ä—ñ–±–ª–æ\n"
                "‚Ä¢ 5-6 –±–∞–ª—ñ–≤: ü•â –ë—Ä–æ–Ω–∑–∞\n"
                "‚Ä¢ –ú–µ–Ω—à–µ 5: üìö –©–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—á–∏—Ç–∏—Å—è\n\n"
                "üéÆ *–Ø–∫ –ø–æ—á–∞—Ç–∏:*\n"
                "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏ –≤—ñ–∫—Ç–æ—Ä–∏–Ω—É' –Ω–∏–∂—á–µ üëá",
                parse_mode='Markdown'
            )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–Ω–æ–ø–∫–∏: {e}")
        await query.message.reply_text(
            "üòî –í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )

def main():
    try:
        app = ApplicationBuilder().token(TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
        app.run_polling()
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main() 